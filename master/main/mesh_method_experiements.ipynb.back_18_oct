{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 826,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import leastsq\n",
    "import pandas as pd\n",
    "import math\n",
    "from scipy.stats import norm\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import scipy.stats as stats\n",
    "from sklearn.neighbors import kneighbors_graph\n",
    "import time\n",
    "\n",
    "import scipy.sparse as sparse\n",
    "from scipy.stats import multivariate_normal\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (7,7) # Make the figures a bit bigger\n",
    "\n",
    "#nicer plots\n",
    "import seaborn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.16666667,  0.33333333,  0.5       ],\n",
       "       [ 0.26666667,  0.33333333,  0.4       ],\n",
       "       [ 0.29166667,  0.33333333,  0.375     ]])"
      ]
     },
     "execution_count": 490,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transition_matrix = np.array([[1.,2.,3.],[4.,5.,6.],[7.,8.,9.]])\n",
    "\n",
    "transition_matrix_row_sums = transition_matrix.sum(axis=1)                    \n",
    "normalized_transition_matrix = transition_matrix / transition_matrix_row_sums[:, np.newaxis]\n",
    "\n",
    "normalized_transition_matrix \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 557,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2,  4,  6],\n",
       "       [12, 15, 18],\n",
       "       [28, 32, 36]])"
      ]
     },
     "execution_count": 557,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
    "B = np.array([2,3,4])\n",
    "A * B[:, np.newaxis]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 832,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class BSDE(object):\n",
    "    \n",
    "    def __init__(self,S0, K, T, mu, sigma, q):\n",
    "        ''' \n",
    "        \n",
    "        Parameters\n",
    "        ==========\n",
    "        S0             : float\n",
    "                          positive, initial Stock Value\n",
    "        mu              : float\n",
    "                          drift\n",
    "        K               : float \n",
    "                          Strike price\n",
    "        T               : float \n",
    "                          Maturity time \n",
    "        sigma           : float \n",
    "                          volatility\n",
    "         Returns\n",
    "        =======\n",
    "        BSDE : class\n",
    "        '''\n",
    "        self.S0 = S0 \n",
    "        self.K = K \n",
    "        self.T = T\n",
    "        self.mu = mu\n",
    "        self.sigma = sigma \n",
    "        self.q = q\n",
    "\n",
    "    def generate_paths(self,r,N,m, mode='delta_B'):\n",
    "        if mode == 'delta_B':\n",
    "            dt = self.T / m\n",
    "            S = np.zeros((m + 1, N))\n",
    "            dB = np.zeros((m + 1, N))\n",
    "            S[0] = self.S0\n",
    "            for t in range(1,m + 1):\n",
    "                X = np.random.standard_normal(size=N)\n",
    "                S[t] = S[t - 1] * np.exp((self.mu - self.sigma * self.sigma/2) * dt\n",
    "                                         + self.sigma * np.sqrt(dt) * X)\n",
    "                dB[t] =  np.sqrt(dt) * X\n",
    "            return (S, dB)\n",
    "        elif mode=='B':\n",
    "            dt = self.T / m\n",
    "            S = np.zeros((m + 1, N))\n",
    "            B = np.zeros((m + 1, N))\n",
    "            S[0] = self.S0\n",
    "            for t in range(1, m + 1):\n",
    "                X = np.random.standard_normal(size=N)\n",
    "                S[t] = S[t - 1] * np.exp((self.mu - self.sigma * self.sigma / 2) * dt\n",
    "                                         + self.sigma * np.sqrt(dt) * X)\n",
    "                B[t] = np.sqrt(t) * X\n",
    "            return (S, B)\n",
    "\n",
    "\n",
    "    def get_price_lsm(self, R, r, N, m, \n",
    "                      K1 = 95., K2 = 105., deg=8, \n",
    "                      oPayoff = \"call\", oType = \"European\", n_picard = 10):\n",
    "        '''\n",
    "        Function to generate stock paths.\n",
    "\n",
    "        Parameters\n",
    "        ==========\n",
    " \n",
    "        r               : float \n",
    "                          lending interest rate \n",
    "        R               : float \n",
    "                          borrowing interest rate \n",
    "        N               : int \n",
    "                          Number of paths generated      \n",
    "        m               : int \n",
    "                          number of steps\n",
    "        d               : int \n",
    "                          polynomial fit degree\n",
    "\n",
    "        Returns\n",
    "        =======\n",
    "        Y_opt : float\n",
    "                Price of the European option\n",
    "                \n",
    "        Remarks\n",
    "        =======\n",
    "        equivalent to solving the BSDE:\n",
    "            -dY = driver * dt - Z * dW\n",
    "        where:\n",
    "            driver = [(r-mu)/sigma]*Z - r*Y + (R-r)*(Y-Z/sigma)^-\n",
    "        '''  \n",
    "        #Time-step\n",
    "        dt = self.T / m     \n",
    "        #Discount factor\n",
    "        df = 1. / (1 + r * dt)\n",
    "        theta = -(r - self.mu) / self.sigma\n",
    "        # S, dB\n",
    "        S, dB = self.generate_paths(r, N, m)       \n",
    "        #price of the option at time T = Initialization for a call\n",
    "        if oPayoff == \"call\":\n",
    "            Y = np.maximum(S[-1] - self.K,0)\n",
    "        elif oPayoff == \"put\":\n",
    "            Y = np.maximum(self.K - S[-1], 0)\n",
    "        elif oPayoff == \"call combination\":\n",
    "            Y = np.maximum(S[-1] - K1,0) - 2 * np.maximum(S[-1] - K2,0)\n",
    "        elif oPayoff == \"put combination\":\n",
    "            Y = np.maximum(K1 - S[-1],0) - 2 * np.maximum(K2 - S[-1],0)\n",
    "\n",
    "\n",
    "        if (oType == 'European'): \n",
    "            #Iteration over time backwardly \n",
    "            for t in range (m - 1, 0, -1):            \n",
    "                X = S[t]\n",
    "                \n",
    "                # Regression for Z_t: \n",
    "                #\n",
    "                # Z_t = E( Y_[t+dt] * dW_t | filtration_t)  /dt\n",
    "                #\n",
    "                reg1 = np.polyfit(X, Y * dB[t], deg)\n",
    "                Z = np.polyval(reg1, X) * (1./ dt)\n",
    "\n",
    "                # Regression for Y_t\n",
    "                #\n",
    "                # Y_t = E(Y_[t+dt] + dt * driver | filtration_t)\n",
    "                #\n",
    "                \n",
    "                driver = -theta * Z - r * Y - (R-r) * np.minimum(Y - (1. / self.sigma) * Z, 0)                \n",
    "                reg = np.polyfit(X, Y + dt * driver, deg)\n",
    "                Y_inc = np.polyval(reg, X)\n",
    "                for __ in range(n_picard):\n",
    "                    # update Z\n",
    "                    reg1  = np.polyfit(X, (Y - Y_inc) * dB[t], deg)\n",
    "                    Z = np.polyval(reg1, X) * (1. / dt)\n",
    "                    #update Z\n",
    "                    driver = -theta * Z - r * Y - (R-r) * np.minimum(Y - (1. / self.sigma) * Z, 0)                \n",
    "                    reg = np.polyfit(X, Y + dt * driver, deg)\n",
    "                    Y_inc = np.polyval(reg, X)\n",
    "                Y[:] = Y_inc\n",
    "                #plt.plot(X, Z, 'r.')\n",
    "                #plt.show()\n",
    "                \n",
    "            #do the last step\n",
    "            Z = np.mean(Y * dB[0]) * (1. / dt)\n",
    "            driver = -theta * Z - r * Y - (R-r) * np.minimum(Y - (1. / self.sigma) * Z, 0)\n",
    "            Y_opt= np.mean(Y + dt * driver)\n",
    "        return (Y_opt)\n",
    "\n",
    "    def get_price_mesh(self, N, m, r, R, \n",
    "                       mode='nearest neighbours', n_neighbors=10, \n",
    "                       K1=95., K2=105., oPayoff=\"call\",\n",
    "                       oType=\"European\", n_picard=0):\n",
    "        \"\"\"\n",
    "        Approach\n",
    "        ========\n",
    "        Call T(i,j,t) the transition from S_i at time \"t\" to S_j at time \"t+dt\". Then:\n",
    "        1) P(S_[t+dt] = S_j) \\approx (1/N) * sum_i T(i,j,t)  \\def P^[t+dt]_j\n",
    "        2) E[X^[t+dt]_j|S^t_i] \\approx (1/N) * sum_j T(i,j,t) * X^[t+dt]_j / P^[t+dt]_j  (basic importance sampling)\n",
    "        3) Consequently, define\n",
    "            W(i,j,t) = (1/N) * T(i,j,t) / P^[t+dt]_j\n",
    "        and we have \n",
    "            E[ (something) | filtration_t] = dot_product(W, something)\n",
    "        4) remark: one can slightly reduce the variance by further normalizing the rows\n",
    "        \n",
    "        \"\"\"\n",
    "        # Time-step\n",
    "        dt = self.T / m\n",
    "        # Discount factor\n",
    "        df = 1 / (1 + r * dt)\n",
    "        theta = -(r - self.mu) / self.sigma\n",
    "        a = (r - 0.5 * self.sigma ** 2) * dt\n",
    "        c = self.sigma * np.sqrt(dt)\n",
    "        drift_dt = (r - 0.5 * self.sigma ** 2) * dt\n",
    "        sigma_sqt = self.sigma * np.sqrt(dt)\n",
    "        gauss_normalization = np.sqrt( 2 * np.pi) * sigma_sqt\n",
    "        # S, dB\n",
    "        S, B = self.generate_paths(r, N, m, mode='B')\n",
    "        S, dB = self.generate_paths(r, N, m)       \n",
    "\n",
    "        # price of the option at time T = Initialization for a call\n",
    "        if oPayoff == \"call\":\n",
    "            Y = np.maximum(S[-1] - self.K, 0)\n",
    "        elif oPayoff == \"put\":\n",
    "            Y = np.maximum(self.K - S[-1], 0)\n",
    "        elif oPayoff == \"call combination\":\n",
    "            Y = np.maximum(S[-1] - K1, 0) - 2 * np.maximum(S[-1] - K2, 0)\n",
    "        elif oPayoff == \"put combination\":\n",
    "            Y = np.maximum(K1 - S[-1], 0) - 2 * np.maximum(K2 - S[-1], 0)\n",
    "\n",
    "        # Time-step\n",
    "        dt = self.T / m\n",
    "        # Discount factor\n",
    "        df = 1 / (1 + r * dt)\n",
    "        theta = -(r - self.mu) / self.sigma\n",
    "        a = (r - 0.5 * self.sigma ** 2) * dt\n",
    "        c = self.sigma * np.sqrt(dt)\n",
    "        # S, dB\n",
    "        S, B = self.generate_paths(r, N, m, mode='B')\n",
    "        # price of the option at time T = Initialization for a call\n",
    "        if oPayoff == \"call\":\n",
    "            Y = np.maximum(S[-1] - self.K, 0)\n",
    "        elif oPayoff == \"put\":\n",
    "            Y = np.maximum(self.K - S[-1], 0)\n",
    "        elif oPayoff == \"call combination\":\n",
    "            Y = np.maximum(S[-1] - K1, 0) - 2 * np.maximum(S[-1] - K2, 0)\n",
    "        elif oPayoff == \"put combination\":\n",
    "            Y = np.maximum(K1 - S[-1], 0) - 2 * np.maximum(K2 - S[-1], 0)\n",
    "\n",
    "        if mode == 'all neighbours':\n",
    "            if (oType == 'European'):\n",
    "\n",
    "                # Iteration over time backwardly\n",
    "                for t in range(m - 1, 0, -1):\n",
    "                    W = np.zeros([N, N])\n",
    "                    for j in range(N):\n",
    "                        for k in range(N):\n",
    "                            W[j, k] = (1 / ( self.sigma * np.sqrt(dt))) * norm.pdf(\n",
    "                                (np.log(S[t + 1, k] / S[t, j]) - a) / c)\n",
    "\n",
    "\n",
    "                    # for k in range(n_neighbors):\n",
    "                    #     W[:, k] = W[:, k] / np.sum(W[:, k])\n",
    "\n",
    "                    for k in range(N):\n",
    "                        W[:, k] = W[:, k] / np.sum(W[:, k])\n",
    "\n",
    "                    Z = np.zeros(N)\n",
    "                    for j in range (N):\n",
    "                        Z[j] = 1 / dt * np.sum(Y * (B[t + 1, :] - B[t, j]) * W[j, :])\n",
    "                        Y[j] = df * (\n",
    "                        np.sum(Y * W[j, :]) - theta * dt * Z[j] - np.minimum(Y[j] - (1. / self.sigma) * Z[j], 0) * (R - r) * dt)\n",
    "\n",
    "                    # for __ in range(n_picard):\n",
    "                    #     rf.fit(X, (Y - Y_inc) * dB[t])\n",
    "                    #     Z = rf.predict(X) * (1. / dt)\n",
    "                    #\n",
    "                    #     Y_inc = df * (J - theta * Z * dt -\n",
    "                    #                   np.minimum(Y - (1. / self.sigma) * Z, 0) *\n",
    "                    #                   (R - r) * dt)\n",
    "\n",
    "            Y_opt = np.mean(Y)\n",
    "            return (Y_opt)\n",
    "\n",
    "        if mode == 'all neighbours fast':\n",
    "            if (oType == 'European'):\n",
    "                #log_S follows a drifted Brownian motion with\n",
    "                #drift = mu - sigma**2/2\n",
    "                #volatility = sigma\n",
    "                #weight matrix\n",
    "                W = np.zeros([N, N])\n",
    "                transition_matrix = np.zeros([N, N])\n",
    "                marginal_vector = np.zeros(N)\n",
    "                dist_matrix = np.zeros([N, N])\n",
    "                log_S_start = np.zeros(N)\n",
    "                log_S_end = np.zeros(N)\n",
    "                Z = np.zeros(N)\n",
    "                Y_inc = np.zeros(N)\n",
    "                # Iteration over time backwardly\n",
    "                for t in range(m - 1, 0, -1):\n",
    "                    #work on logscale\n",
    "                    log_S_end = np.log(S[t + 1, :])\n",
    "                    log_S_start = np.log(S[t, :])\n",
    "                    #distances matrix\n",
    "                    dist_matrix = -np.subtract.outer(log_S_start, log_S_end)\n",
    "                    #transition densities matrix\n",
    "                    transition_matrix = np.exp( -0.5 * np.square( dist_matrix - drift_dt ) / sigma_sqt**2 ) / gauss_normalization\n",
    "                    #marginals\n",
    "                    marginal_vector = np.mean(transition_matrix, axis=0)\n",
    "                    #plt.subplot(m,1,t+1)\n",
    "                    #plt.plot(log_S_end, marginal_vector, \"bo\")\n",
    "                    #plt.title(str(t))\n",
    "                    #plt.xlim(4,5)\n",
    "                    #weight matrix\n",
    "                    W = (1. / N) * transition_matrix / marginal_vector\n",
    "                    #normalize the rows\n",
    "                    #W_row_sums = W.sum(axis=1)                    \n",
    "                    #W = W / W_row_sums[:, np.newaxis]\n",
    "\n",
    "                    #plt.subplot(m,1,t+1)\n",
    "                    #plt.plot(log_S_start, W_row_sums, \"bo\")\n",
    "                    #plt.ylim(0.5, 1.5)\n",
    "                    #plt.title(str(t))\n",
    "                \n",
    "                    #print W\n",
    "                    # Regression for Z_t: \n",
    "                    #\n",
    "                    # Z_t = E( Y_[t+dt] * dW_t | filtration_t)  /dt\n",
    "                    #\n",
    "                    \n",
    "                    # 1st version\n",
    "                    Z = np.dot(W, Y * dB[t]) * (1./ dt)\n",
    "                    # follwing is Majdi's version\n",
    "                    #delta_B = -np.subtract.outer(B[t,:],B[t+1,:])\n",
    "                    #Z = np.sum(W * (delta_B * Y[:,np.newaxis]), axis=1) * (1./ dt)\n",
    "\n",
    "                    # Regression for Y_t\n",
    "                    #\n",
    "                    # Y_t = E(Y_[t+dt] + dt * driver | filtration_t)\n",
    "                    #\n",
    "\n",
    "                    driver = -theta * Z - r * Y - (R-r) * np.minimum(Y - (1. / self.sigma) * Z, 0)                \n",
    "                    Y_inc = np.dot(W, Y + dt * driver)\n",
    "                    for __ in range(n_picard):\n",
    "                        # update Z\n",
    "                        # 1sr version\n",
    "                        Z = np.dot(W, (Y - Y_inc) * dB[t]) * (1. / dt)\n",
    "                        # Majdi's version\n",
    "                        #delta_B = -np.subtract.outer(B[t,:],B[t+1,:])\n",
    "                        #Z = np.sum(W * delta_B, axis=1) * (1./ dt)\n",
    "                        #update Z\n",
    "                        driver = -theta * Z - r * Y - (R-r) * np.minimum(Y - (1. / self.sigma) * Z, 0)                \n",
    "                        Y_inc = np.dot(W, Y + dt * driver)\n",
    "                    Y = Y_inc\n",
    "                    \n",
    "                    plt.subplot(1, m,t+1)\n",
    "                    plt.plot(S[t,:], Y, \"b.\")\n",
    "                    plt.title(str(t))\n",
    "                    \n",
    "                    #plt.plot(X, Z, 'r.')\n",
    "                    #plt.show()                    \n",
    "            Z = np.mean(Y * dB[0]) * (1. / dt)\n",
    "            driver = -theta * Z - r * Y - (R-r) * np.minimum(Y - (1. / self.sigma) * Z, 0)\n",
    "            Y_opt= np.mean(Y + dt * driver)\n",
    "            return (Y_opt)\n",
    "\n",
    "        if mode == 'nearest neighbours':\n",
    "            if (oType == 'European'):\n",
    "\n",
    "                # Iteration over time backwardly\n",
    "                for t in range(m - 1, 0, -1):\n",
    "                    Z = np.zeros(N)\n",
    "                    data = S[t + 1].reshape(N, 1)\n",
    "                    NN = kneighbors_graph(data, n_neighbors,\n",
    "                                          mode='distance').nonzero()\n",
    "\n",
    "                    W = np.zeros([N, n_neighbors + 1])\n",
    "                    for j in range(N):\n",
    "                        for k in range(n_neighbors):\n",
    "                            W[j, n_neighbors] = (1 / (S[t + 1, n_neighbors] * self.sigma * np.sqrt(dt))) * norm.pdf(\n",
    "                                (np.log(S[t + 1, j] / S[t, j]) - a) / c)\n",
    "                            W[j, k] = (1 / (S[t + 1, k] * self.sigma * np.sqrt(dt))) * norm.pdf(\n",
    "                                (np.log(S[t + 1, NN[1][j + k]] / S[t, j]) - a) / c)\n",
    "\n",
    "                    for k in range(n_neighbors + 1):\n",
    "                        W[:, k] = W[:, k] / np.sum(W[:, k])\n",
    "\n",
    "                    for j in range(N):\n",
    "                        # for k in range(j, (j + n_neighbors)):\n",
    "                        #     print(NN[1][k])\n",
    "                        #     print (\"************\")\n",
    "                        #     print(Y[NN[1][k]])\n",
    "                        # int_res = np.array([Y[NN[1][k]] for k in range(j, (j + n_neighbors))])\n",
    "                        # print(int_res)\n",
    "                        Z[j] = 1 / dt * np.sum(\n",
    "                            np.array([Y[NN[1][k]] for k in range(j, (j + n_neighbors))] + [Y[j]]) *\n",
    "                            np.array([(B[t + 1, NN[1][k]] - B[t, j]) for k in range(j, j + n_neighbors)] + [\n",
    "                                B[t + 1, j] - B[t, j]]) * W[j, :])\n",
    "                        Y[j] = df * (np.sum(\n",
    "                            np.array([Y[NN[1][k]] for k in range(j, (j + n_neighbors))]  + [Y[j]]) * W[j, :]) -\n",
    "                                     theta * dt * Z[\n",
    "                                         j] - np.minimum(\n",
    "                            Y[j] - (1. / self.sigma) * Z[j], 0) *\n",
    "                                     (R - r) * dt)\n",
    "\n",
    "                    #for __ in range(n_picard):\n",
    "                    #    rf.fit(X, (Y - Y_inc) * dB[t])\n",
    "                    #     Z = rf.predict(X) * (1. / dt)\n",
    "                    #\n",
    "                    #     Y_inc = df * (J - theta * Z * dt -\n",
    "                    #                   np.minimum(Y - (1. / self.sigma) * Z, 0) *\n",
    "                    #                   (R - r) * dt)\n",
    "\n",
    "            Y_opt = df * np.mean(Y)\n",
    "            return Y_opt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 833,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mesh Fast = 7.37913417483\n",
      "LSM = 7.32345023175\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAADeAAAAG0CAYAAADg0WazAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3X+U3XV5J/D33JmASSYlJjMJlKQWYbggPxaJBaOISKLT\nIDQOOXIQ6rqEgqzalbBAQdraqgtbOatpl60ST7dZhWUXIT+s4E6ZsEjZGChB16XK3buUbZN4DJOk\nJ+YmQSZzZ/+YTQQTyA8y+d4783qd44F7uQzv+804n3nu9/N8npahoaGhAAAAAAAAAAAAAAAAAACv\nUio6AAAAAAAAAAAAAAAAAAA0Ig14AAAAAAAAAAAAAAAAALAPGvAAAAAAAAAAAAAAAAAAYB804AEA\nAAAAAAAAAAAAAADAPmjAAwAAAAAAAAAAAAAAAIB90IAHAAAAAAAAAAAAAAAAAPugAQ8AAAAAAAAA\nAAAAAAAA9kEDHmPSvffemwULFuSMM87IrbfeWnQcABrYyy+/nNtuuy0XXnhhZs2alZ6enjz++ONF\nxwKgQd10000577zzMmvWrMydOzdf+cpXio4EQIP7v//3/+bMM8/MzTffXHQUABrURz/60Zx55pk5\n++yz8/a3vz3z5s0rOhIADe6hhx7KRRddlLe//e35wAc+kLVr1xYdCYAG8/a3vz1nn332njrjbW97\nW77whS8UHQuABrVx48Zcd911Offcc3Peeefl85//fOr1etGxAGhAzz//fD72sY/lHe94R7q7u9PX\n11d0JDhs2ooOAEWYPn16PvGJT+SJJ57ISy+9VHQcABrY4OBgjjvuuNx777057rjj8thjj+X666/P\nt7/97fzqr/5q0fEAaDAf//jH84UvfCFHH310Xnjhhfz2b/92Tj/99LznPe8pOhoADerzn/98zjzz\nzKJjANDgPvvZz2bBggVFxwCgCfyP//E/8u/+3b/L4sWLc+aZZ+bFF18sOhIADej73//+nr/fsWNH\nzjvvPId9APCavvCFL+TNb35znnjiifzsZz/Lv/gX/yL/+T//5/z2b/920dEAaCCDg4P5xCc+kSuu\nuCJLly7Nk08+mX/5L/9lVqxYkbe85S1Fx4M3zAQ8xqS5c+dmzpw5OeaYY4qOAkCDGz9+fD71qU/l\nuOOOS5JccMEFmTFjRv7u7/6u4GQANKKTTjopRx99dJJkaGgobW1tmTJlSsGpAGhUDz30UH7lV34l\n73znO4uOAkCDGxoaKjoCAE3i3//7f59PfvKTew76mDZtWqZNm1ZwKgAaWW9vb6ZOnZpZs2YVHQWA\nBvW///f/zrx58zJu3LhMnTo173nPe1KtVouOBUCD+fu///v09/fnYx/7WFpaWvLOd74zZ599dlau\nXFl0NDgsNOABAByETZs25R/+4R9y0kknFR0FgAb1x3/8xznrrLNyySWX5Lrrrstpp51WdCQAGlCt\nVsuf/dmf5ZZbbik6CgBN4Etf+lJmz56dK664Ik899VTRcQBoUPV6Pc8++2w2b96cD3zgA7ngggvy\n+c9/Pi+//HLR0QBoYCtWrMj8+fOLjgFAA3vPe96Tb3/723nppZeycePG/M3f/E3OP//8omMB0ASG\nhoY0bTNqaMADADhAu3btyk033ZSenp6ccMIJRccBoEF99rOfzfe///385V/+ZRYvXpwf/vCHRUcC\noAH96Z/+aS677LJMnz696CgANLibbropfX19efzxx3PZZZfluuuuy7p164qOBUAD2rRpU3bt2pW/\n/uu/zn333ZcVK1bkRz/6Uf78z/+86GgANKgNGzbk6aefTk9PT9FRAGhgv/u7v5tqtZpZs2blggsu\nyOmnn545c+YUHQuABnPCCSdk6tSp+Yu/+Ivs2rUrTzzxRJ566qns3Lmz6GhwWGjAAwA4AENDQ7np\nppty1FFH5Q/+4A+KjgNAg2tpack555yT3/zN38xDDz1UdBwAGsyPf/zjfO9738vHPvaxoqMA0ATO\nPPPMTJgwIePGjcuHPvShnH322Xn88ceLjgVAA3rTm96UJPnoRz+aqVOnZvLkybnqqqusGwC8ppUr\nV+bss8/O8ccfX3QUABrY1VdfnXnz5uV//s//mTVr1mTr1q258847i44FQINpa2vLf/gP/yGPPfZY\nzjvvvCxdujQXXXRRjj322KKjwWHRVnQAAIBm8JnPfCb/9E//lCVLlqS1tbXoOAA0icHBwT0bnwBg\nt6eeeiobNmzIBRdckCTZvn176vV6/s//+T9ZtmxZseEAaHgtLS0ZGhoqOgYADehXfuVX9trQ1NLS\nUlAaAJrBypUrc9111xUdA4AGtmXLljz77LNZunRp2tracswxx+TSSy/Nn/7pn+amm24qOh4ADebk\nk0/ON77xjT2PL7/88lx66aUFJoLDxwQ8xqTBwcH8/Oc/T71ez+DgYF5++eUMDg4WHQuABvWHf/iH\n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\ngtttgtutXXa5TEEn9zh2TH+fxLuvEvg+mSb6mROuzp21fSGzGaioAIqLgWXLTMjNDcyhxPwd8e9X\nw3HQcBwoUKyPZ4T7vlXovoR3vyOcfZXAfRTv9Xonh3I6TbqT72SUkQGkpGiTt196yYSxY73vecV6\n4jh7hBfHQcNxoFDt+Z0I7PvB7y+Z8O67af8/GTr4fqG9P/DEgN7j5Npl/7NVVOhnSuxODhgfKSnA\nuHHACy+YUFBgQySZYOS/ZW6buoy+fW3V5gl4OTk5OH36tO/76upqZGdnR6UoIiIyFmYGERFFQvXc\nyM3VzpYUzed76KHoPR8RkZHImBk33wwIEfnthw+3/JjUVP3bw8mc1FTgjjv83//yl/7Lq1e3/lgi\nIiOJZWa01vvbmgutPUbvdu4zEBFFT7Qy42oZEOvH64n28xERUWLfn4pGVrT0HA89FNl+Rkv35b4K\nEZGfbMc02vq+FRERxV4iMiPcvt+WfGCeEJFRmNv6wGHDhuHkyZM4deoUmpqasHnzZowbNy6atRER\nkUEwM4iIKBLMDSIiChczg4iIwsXMICKicDEziIgoEswNIiIKFzODiIjCxcwgIpJTm1fAs1gsWLJk\nCWbPng0hBKZPn46CgoJo1kZERAbBzCAiokgwN4iIKFzMDCIiChczg4iIwsXMICKiSDA3iIgoXMwM\nIiIKFzODiEhOJiG4qCcREREREREREREREREREREREREREREREREREVEoc6ILICIiIiIiIiIiIiIi\nIiIiIiIiIiIiIiIiIiIikhEn4BEREREREREREREREREREREREREREREREREREengBDwiIiIiIiIi\nIiIiIiIiIiIiIiIiIiIiIiIiIiIdMZuAt3btWkyaNAlFRUWYN28empqa8PLLL+O2225DSUkJSkpK\nsGPHjli9fLu88cYbKCoqQlFREd58800AQG1tLWbPno0777wTDz30EC5fvpzgKlumV7+sY79o0SKM\nHj0aRUVFvutaG+u1a9diwoQJmDhxIj799NNElBwkkvpPnTqFESNG+H4GTz31VIKq1ujV/uGHH2Ly\n5MkYPHgwvv3226D7yzT2kdQu27gD+vU/++yzmDhxIoqLizFnzhzU1dX5bpNp7GNFLzMS3XdlzDEZ\n80mGzJExS2TLBxl7voy9XMb+HElNMmZeLNjtdkyZMgUlJSWYMmUKbrzxRrz55psJ74fRImMmRouM\n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\nt3YZxx1oXv+OHTvwl7/8BWvWrEFSUpLvehnHPtr0MqNfv34J7buy5piM+SRL5siYJbLlg4w9X8Ze\nLmN/DrcmWTMvVjZv3hx0hpxE98NokDETo0nGHGsPGbMnmmTMjWiRsddHS+i2nThxwne5tLQUgwYN\nAqDmtrWHipmheiao2PNV7uuq92yV+7LKfTew9gEDBuCzzz5DWVkZtm3bhpycHGzatAkZGRlS1h5L\nzIzEUC03VM4MQO3cYGYkBjNDn+yZoUo+yJwBKvR7FXq6Kr1bhT6tSj8OHcuWjhsmus54yczMRM+e\nPWG32wFA2n4ca6rkUqyokCnxoEomxIMqPT3WQn8nCgsL8cUXXwAA7HY7nE4nunfvbvhx8GJmaJgZ\nzAwv5oaGmaFhZgQzcmYYNQeM3N+N3K+N3ION3FdDt61v37748ssvAQCff/45+vTpA6Dtv5Mm0dq7\nsu2wbt06bNq0CWazGUOGDMHSpUuxePFiHD58GGazGb169cIf/vAHZGZmxuLl2+W+++5DbW0trFYr\nFi5ciJtvvhk1NTX47W9/izNnzqBXr1544YUXkJ6enuhSdenVP3/+fCnHft68edi9ezdqamqQmZmJ\nOXPmoLCwEHPnztUd67Vr12LDhg2wWq1YvHgxbr31VmXq37JlC1588UXYbDaYTCbMnTsXt99+u1S1\nd+3aFUuXLsXFixeRnp6OQYMGYd26dQDkGvtIapdt3Fuqf+3atXA6nejWrRsAYMSIEXjqqacAyDX2\nsRKYGddffz2eeeYZ1NfXJ7TvyphjMuaTDJkjY5bIlg8y9nwZe7mM/TmSmmTMvFhxOBy44447UFpa\nitTUVABIeD+MFhkzMVpkzLG2kjF7oknG3IgWGXt9tOht2yeffAK73Q6LxYK8vDw89dRTyMjIAKDW\ntrWHypmhciao1vNV7uuq92yV+7LKfVev9mnTpvluHzduHN555x3fz0Cm2mOJmZE4KuWGypnRUv2q\n5AYzQ57amRnqZIYK+SBrBqjQ71Xo6ar0bhX6tCr9WK/O3bt3t3jcsKPkxpEjR7B48WK4XC7k5eVh\nxYoVcLvdCe918aZCLsWCCpkSD6pkQjyo0tNjTW8ciouLsXDhQhw5cgQ2mw0LFizATTfdBMC44xCK\nmaFhZnTszACYG17MDA0zQ5+RM8NoOWDk/m7kfm3kHmzkvqq3bQMHDsTTTz8Np9OJ5ORk/P73v8f1\n118PoG3bFrMJeERERERERERERERERERERERERERERERERERERCozJ7oAIiIiIiIiIiIiIiIiIiIi\nIiIiIiIiIiIiIiIiGXECHhERERERERERERERERERERERERERERERERERkQ5OwCMiIiIiIiIiIiIi\nIiIiIiIiIiIiIiIiIiIiItLBCXhEREREREREREREREREREREREREREREREREREQ6OAGPiIiIiIiI\niIiIiIiIiIiIiIiIiIiIiIiIiIhIByfgERERERERERERERERERERERERERERERERERER6eAEPCIi\nIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIh3/BwRqSYb199qoAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f504a8b5f90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "T = 0.5\n",
    "m_time_discretization = 10\n",
    "K = 100\n",
    "S0 = 100\n",
    "sigma = 0.2\n",
    "r = 0.04\n",
    "\n",
    "\n",
    "N_particles = 1000\n",
    "mu = 0.06\n",
    "R = 0.06\n",
    "q = 0.\n",
    "RF_n_trees = 100\n",
    "RF_max_leaf_nodes = 50\n",
    "\n",
    "test = BSDE(S0, K, T, mu, sigma, q)\n",
    "#price_mesh_slow = test.get_price_mesh(N_particles, m_paths, r, R, mode='all neighbours')\n",
    "#print(\"Mesh Slow = {}\".format(price_mesh_slow))\n",
    "\n",
    "plt.rcParams['figure.figsize'] = (7*m_time_discretization,7) # Make the figures a bit bigger\n",
    "price_mesh_fast = test.get_price_mesh(N_particles, m_time_discretization, \n",
    "                                      r, R, mode='all neighbours fast', n_picard = 10)\n",
    "print(\"Mesh Fast = {}\".format(price_mesh_fast))\n",
    "\n",
    "price_LSM = test.get_price_lsm(R, r, N_particles, m_time_discretization, deg=5, n_picard = 10)\n",
    "print(\"LSM = {}\".format(price_LSM))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
